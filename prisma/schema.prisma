// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User and Profile Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  role          UserRole  @default(PLAYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]

  // Profile Relations
  playerProfile PlayerProfile?
  scoutProfile  ScoutProfile?

  // Content Relations
  videos              Video[]
  receivedEndorsements Endorsement[] @relation("PlayerEndorsements")
  givenEndorsements    Endorsement[] @relation("EndorserEndorsements")
  sentMessages         Message[]     @relation("SentMessages")
  receivedMessages     Message[]     @relation("ReceivedMessages")
  shortlists          ScoutShortlist[]
  sentInvitations     TrialInvitation[] @relation("SentInvitations")
  receivedInvitations TrialInvitation[] @relation("ReceivedInvitations")
  shortlistedBy       ScoutShortlist[] @relation("ShortlistedBy")
}

enum UserRole {
  PLAYER
  SCOUT
  ADMIN
}

model PlayerProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  nationality      String
  position         Position
  secondaryPosition Position?
  preferredFoot    Foot
  height           Int
  weight           Int
  currentTeam      String?
  bio              String   @db.Text
  achievements     String[]
  availableForTrials Boolean @default(false)
  willingToRelocate Boolean @default(false)
  views            Int      @default(0)
  rating           Float    @default(0)
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Position {
  GOALKEEPER
  RIGHT_BACK
  LEFT_BACK
  CENTER_BACK
  DEFENSIVE_MIDFIELDER
  CENTRAL_MIDFIELDER
  ATTACKING_MIDFIELDER
  RIGHT_WINGER
  LEFT_WINGER
  STRIKER
}

enum Foot {
  LEFT
  RIGHT
  BOTH
}

model ScoutProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  organization String
  role         String
  bio          String   @db.Text
  website      String?
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Video {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?  @db.Text
  url          String
  thumbnailUrl String
  duration     Int
  tags         String[]
  skills       Json     @default("[]")
  views        Int      @default(0)
  likes        Int      @default(0)
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id           String       @id @default(cuid())
  playerId     String
  endorserId   String
  endorserRole EndorserRole
  relationship String
  skills       String[]
  comment      String       @db.Text
  createdAt    DateTime     @default(now())

  player   User @relation("PlayerEndorsements", fields: [playerId], references: [id], onDelete: Cascade)
  endorser User @relation("EndorserEndorsements", fields: [endorserId], references: [id], onDelete: Cascade)
}

enum EndorserRole {
  PLAYER
  SCOUT
  COACH
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String   @db.Text
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model TrialInvitation {
  id       String       @id @default(cuid())
  scoutId  String
  playerId String
  date     DateTime
  location String
  details  String       @db.Text
  status   TrialStatus @default(PENDING)
  createdAt DateTime    @default(now())

  scout  User @relation("SentInvitations", fields: [scoutId], references: [id], onDelete: Cascade)
  player User @relation("ReceivedInvitations", fields: [playerId], references: [id], onDelete: Cascade)

  @@map("trial_invitations")
}

enum TrialStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model ScoutShortlist {
  id       String          @id @default(cuid())
  scoutId  String
  playerId String
  notes    String?        @db.Text
  rating   Float          @default(0)
  status   ShortlistStatus @default(WATCHING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  scout  User @relation(fields: [scoutId], references: [id], onDelete: Cascade)
  player User @relation("ShortlistedBy", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([scoutId, playerId])
  @@map("scout_shortlists")
}

enum ShortlistStatus {
  WATCHING
  CONTACTED
  TRIAL_INVITED
  DECLINED
  SIGNED
}